{"version":3,"sources":["../src/assert-x.js"],"names":[],"mappings":"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","file":"assert-x.esm.js","sourcesContent":["import {AssertionErrorConstructor} from 'error-x';\nimport isRegExp from 'is-regexp-x';\nimport safeToString from 'to-string-symbols-supported-x';\nimport isFunction from 'is-function-x';\nimport isObjectLike from 'is-object-like-x';\nimport reduce from 'array-reduce-x';\nimport defineProperties from 'object-define-properties-x';\nimport {isDeepEqual, isDeepStrictEqual} from 'is-deep-strict-equal-x';\n\n/** @type {BooleanConstructor} */\nconst castBoolean = true.constructor;\nconst truncOpts = ['length', 'omission', 'separator'];\nconst rxTest = /none/.test;\n\n/**\n * Tests if value is truthy, it is equivalent to `equal(!!value, true, message)`.\n *\n * @param {*} value - The value to be tested.\n * @param {string} message - Text description of test.\n */\nlet $assert;\n\nconst isStringType = function _isStringType(value) {\n  return typeof value === 'string';\n};\n\n/**\n * Extends `arg` with the `truncate` options.\n *\n * @private\n * @param {object} arg - The object to extend.\n * @param {string} name - The `truncate` option name.\n * @returns {object} The `arg` object.\n */\nconst $extendOpts = function extendOpts(arg, name) {\n  arg[name] = $assert.truncate[name];\n\n  return arg;\n};\n\n/**\n * Throws an exception that displays the values for actual and expected\n * separated by the provided operator.\n *\n * @private\n * @param {*} actual - The actual value to be tested.\n * @param {*} expected - The expected value to compare against actual.\n * @param {string} message - Text description of test.\n * @param {string} operator - The compare operator.\n * @throws {Error} Throws an `AssertionError`.\n */\nconst $baseFail = function baseFail(actual, expected, message, operator) {\n  const arg = {\n    actual,\n    expected,\n    message,\n    operator,\n  };\n\n  if (isObjectLike($assert.truncate)) {\n    reduce(truncOpts, $extendOpts, arg);\n  }\n\n  throw new AssertionErrorConstructor(arg);\n};\n\n/**\n * Returns whether an exception is expected. Used by throws.\n *\n * @private\n * @param {*} actual - The actual value to be tested.\n * @param {*} expected - The expected value to compare against actual.\n * @returns {boolean} True if exception expected, otherwise false.\n */\nconst $expectedException = function expectedException(actual, expected) {\n  if (castBoolean(actual) === false || castBoolean(expected) === false) {\n    return false;\n  }\n\n  if (isRegExp(expected)) {\n    return rxTest.call(expected, safeToString(actual));\n  }\n\n  if (actual instanceof expected) {\n    return true;\n  }\n\n  if (isFunction(expected)) {\n    return expected.call({}, actual) === true;\n  }\n\n  return false;\n};\n\n/**\n * Returns whether an exception is expected. Used by assertx~throws and\n * assertx~doesNotThrow.\n *\n * @private\n * @param {boolean} shouldThrow - True if it should throw, otherwise false.\n * @param {Function} block - The function block to be executed in testing.\n * @param {*} expected - The expected value to compare against actual.\n * @param {string} [message] - Text description of test.\n */\nconst $baseThrows = function baseThrows(shouldThrow, block, expected, message) {\n  let msg = message;\n  let clause1 = castBoolean(msg) === false || isStringType(msg) === false;\n\n  if (isFunction(block) === false) {\n    throw new TypeError('block must be a function');\n  }\n\n  let xpd = expected;\n\n  if (clause1 && isStringType(xpd)) {\n    msg = xpd;\n    /* eslint-disable-next-line no-void */\n    xpd = void 0;\n  }\n\n  let actual;\n  try {\n    block();\n  } catch (e) {\n    actual = e;\n  }\n\n  const wasExceptionExpected = $expectedException(actual, xpd);\n  clause1 = xpd && isStringType(xpd.name) && xpd.name;\n  msg = (clause1 ? ` (${xpd.name}).` : '.') + (msg ? ` ${msg}` : '.');\n\n  if (shouldThrow && castBoolean(actual) === false) {\n    $baseFail(actual, xpd, `Missing expected exception${msg}`, '');\n  } else if (castBoolean(shouldThrow) === false && wasExceptionExpected) {\n    $baseFail(actual, xpd, `Got unwanted exception${msg}`, '');\n  } else {\n    let clause2;\n\n    if (shouldThrow) {\n      clause1 = actual && xpd && castBoolean(wasExceptionExpected) === false;\n    } else {\n      clause1 = false;\n      clause2 = actual;\n    }\n\n    if (clause1 || clause2) {\n      throw actual;\n    }\n  }\n};\n\n/**\n * Common function for `assert` and `assert~ok`.\n *\n * @private\n * @param {*} value - The value to be tested.\n * @param {string} message - Text description of test.\n * @param {string} operator - Text description of test operator.\n */\nconst $baseAssert = function baseAssert(value, message, operator) {\n  if (castBoolean(value) === false) {\n    $baseFail(false, true, message, operator);\n  }\n};\n\n$assert = function assert(value, message) {\n  $baseAssert(value, message, 'ok');\n};\n\ndefineProperties($assert, {\n  /**\n   * Error constructor for test and validation frameworks that implement the\n   * standardized AssertionError specification.\n   *\n   * @class\n   * @augments Error\n   * @param {object} [message] - Need to document the properties.\n   */\n  AssertionError: {\n    value: AssertionErrorConstructor,\n  },\n  /**\n   * Tests for deep equality, coercive equality with the equal comparison\n   * operator ( == ) and equivalent.\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   */\n  deepEqual: {\n    value: function deepEqual(actual, expected, message) {\n      if (isDeepEqual(actual, expected) === false) {\n        $baseFail(actual, expected, message, 'deepEqual');\n      }\n    },\n  },\n  /**\n   * Tests for deep equality, coercive equality with the equal comparison\n   * operator ( === ) and equivalent.\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   */\n  deepStrictEqual: {\n    value: function deepStrictEqual(actual, expected, message) {\n      if (isDeepStrictEqual(actual, expected) === false) {\n        $baseFail(actual, expected, message, 'deepStrictEqual');\n      }\n    },\n  },\n  /**\n   * Expects block not to throw an error, see assert~throws for details.\n   *\n   * @param {Function} block - The function block to be executed in testing.\n   * @param {constructor} [error] - The comparator.\n   * @param {string} [message] - Text description of test.\n   */\n  doesNotThrow: {\n    value: function doesNotThrow(block, error, message) {\n      $baseThrows(false, block, error, message);\n    },\n  },\n  /**\n   * Tests shallow, coercive equality with the equal comparison\n   * operator ( == ).\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   */\n  equal: {\n    value: function equal(actual, expected, message) {\n      // noinspection EqualityComparisonWithCoercionJS\n      if (actual != expected /* eslint-disable-line eqeqeq */) {\n        $baseFail(actual, expected, message, '==');\n      }\n    },\n  },\n  /**\n   * Throws an exception that displays the values for actual and expected\n   * separated by the provided operator.\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   * @param {string} operator - The compare operator.\n   * @throws {Error} Throws an `AssertionError`.\n   */\n  fail: {\n    value: $baseFail,\n  },\n  /**\n   * Tests if value is not a falsy value, throws if it is a truthy value.\n   * Useful when testing the first argument, error in callbacks.\n   *\n   * @param {*} err - The value to be tested for truthiness.\n   * @throws {*} The value `err` if truthy.\n   */\n  ifError: {\n    value: function ifError(err) {\n      if (err) {\n        throw err;\n      }\n    },\n  },\n  /**\n   * Tests for any deep inequality. Opposite of `deepEqual`.\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   */\n  notDeepEqual: {\n    value: function notDeepEqual(actual, expected, message) {\n      if (isDeepEqual(actual, expected)) {\n        $baseFail(actual, expected, message, 'notDeepEqual');\n      }\n    },\n  },\n  /**\n   * Tests for deep inequality. Opposite of `deepStrictEqual`.\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   */\n  notDeepStrictEqual: {\n    value: function notDeepStrictEqual(actual, expected, message) {\n      if (isDeepStrictEqual(actual, expected)) {\n        $baseFail(actual, expected, message, 'notDeepStrictEqual');\n      }\n    },\n  },\n  /**\n   * Tests shallow, coercive non-equality with the not equal comparison\n   * operator ( != ).\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   */\n  notEqual: {\n    value: function notEqual(actual, expected, message) {\n      // noinspection EqualityComparisonWithCoercionJS\n      if (actual == expected /* eslint-disable-line eqeqeq */) {\n        $baseFail(actual, expected, message, '!=');\n      }\n    },\n  },\n  /**\n   * Tests strict non-equality, as determined by the strict not equal\n   * operator ( !== ).\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   */\n  notStrictEqual: {\n    value: function notStrictEqual(actual, expected, message) {\n      if (actual === expected) {\n        $baseFail(actual, expected, message, '!==');\n      }\n    },\n  },\n  /**\n   * Tests if value is truthy, it is equivalent to\n   * `equal(!!value, true, message)`.\n   *\n   * @param {*} value - The value to be tested.\n   * @param {string} [message] - Text description of test.\n   */\n  ok: {\n    value: function ok(value, message) {\n      $baseAssert(value, message, 'ok');\n    },\n  },\n  /**\n   * Tests strict equality, as determined by the strict equality\n   * operator ( === ).\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   */\n  strictEqual: {\n    value: function strictEqual(actual, expected, message) {\n      if (actual !== expected) {\n        $baseFail(actual, expected, message, '===');\n      }\n    },\n  },\n  /**\n   * Expects block to throw an error. `error` can be constructor, regexp or\n   * validation function.\n   *\n   * @param {Function} block - The function block to be executed in testing.\n   * @param {constructor|RegExp|Function} [error] - The comparator.\n   * @param {string} [message] - Text description of test.\n   */\n  throws: {\n    value: function throws(block, error, message) {\n      $baseThrows(true, block, error, message);\n    },\n  },\n  truncate: {\n    value: {},\n  },\n});\n\n/**\n * Allows `truncate` options of AssertionError to be modified. The\n * `truncate` used is the one from `lodash`.\n *\n * @name truncate\n * @type {object}\n * @property {number} length=128 - The maximum string length.\n * @property {string} omission='' - The string to indicate text is omitted.\n * @property {RegExp|string} separator='' - The pattern to truncate to.\n * @see {@link https://github.com/Xotic750/truncate-x}\n */\ndefineProperties($assert.truncate, {\n  length: {\n    value: 128,\n    writable: true,\n  },\n  omission: {\n    value: '',\n    writable: true,\n  },\n  separator: {\n    value: '',\n    writable: true,\n  },\n});\n\nconst assert = $assert;\n\nexport default assert;\n"]}