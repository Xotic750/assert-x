{"version":3,"sources":["../src/assert-x.js"],"names":[],"mappings":"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","file":"assert-x.esm.js","sourcesContent":["import {AssertionErrorConstructor, isError} from 'error-x';\nimport isRegExp from 'is-regexp-x';\nimport safeToString from 'to-string-symbols-supported-x';\nimport isFunction from 'is-function-x';\nimport defineProperties from 'object-define-properties-x';\nimport {isDeepEqual, isDeepStrictEqual} from 'is-deep-strict-equal-x';\nimport assign from 'object-assign-x';\nimport toBoolean from 'to-boolean-x';\nimport methodize from 'simple-methodize-x';\nimport call from 'simple-call-x';\n\n/* eslint-disable-next-line no-void */\nconst UNDEFINED = void 0;\nconst rxTest = methodize(/none/.test);\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * Throws an exception that displays the values for actual and expected\n * separated by the provided operator.\n *\n * @private\n * @param {*} actual - The actual value to be tested.\n * @param {*} expected - The expected value to compare against actual.\n * @param {string} message - Text description of test.\n * @param {string} operator - The compare operator.\n * @throws {Error} Throws an `AssertionError`.\n */\n// eslint-enable jsdoc/check-param-names\nconst baseFail = function baseFail(args) {\n  const [actual, expected, message, operator] = args;\n\n  throw new AssertionErrorConstructor({actual, expected, message, operator});\n};\n\n/**\n * Returns whether an exception is expected. Used by throws.\n *\n * @private\n * @param {*} actual - The actual value to be tested.\n * @param {*} expected - The expected value to compare against actual.\n * @returns {boolean} True if exception expected, otherwise false.\n */\nconst expectedException = function expectedException(actual, expected) {\n  if (toBoolean(actual) === false || toBoolean(expected) === false) {\n    return false;\n  }\n\n  if (isRegExp(expected)) {\n    return rxTest(expected, safeToString(actual));\n  }\n\n  if (actual instanceof expected) {\n    return true;\n  }\n\n  if (isFunction(expected)) {\n    return call(expected, {}, [actual]) === true;\n  }\n\n  return false;\n};\n\nconst assertBaseThrowsFnArg = function assertBaseThrowsFnArg(fn) {\n  if (isFunction(fn) === false) {\n    throw new TypeError(`The \"fn\" argument must be of type Function. Received type ${typeof fn}`);\n  }\n};\n\nconst conditonal1 = function conditonal1(msg, xpd) {\n  return (toBoolean(msg) === false || typeof msg !== 'string') && typeof xpd === 'string';\n};\n\nconst getParts = function getParts(msg, xpd) {\n  return {\n    part1: xpd && typeof xpd.name === 'string' && xpd.name ? ` (${xpd.name}).` : '.',\n    part2: msg ? ` ${msg}` : '.',\n  };\n};\n\nconst getBaseThrowsMsg = function getBaseThrowsMsg(message, expected) {\n  let msg = message;\n  let xpd = expected;\n\n  if (conditonal1(msg, xpd)) {\n    msg = xpd;\n    xpd = UNDEFINED;\n  }\n\n  const {part1, part2} = getParts(msg, xpd);\n\n  return {\n    msg: (part1 === '.' ? '' : part1) + part2,\n    xpd,\n  };\n};\n\nconst throwerBaseThrows = function throwerBaseThrows(args) {\n  const [shouldThrow, actual, xpd, wasExceptionExpected] = args;\n  let clause1;\n  let clause2;\n\n  if (shouldThrow) {\n    clause1 = actual && xpd && toBoolean(wasExceptionExpected) === false;\n  } else {\n    clause1 = false;\n    clause2 = actual;\n  }\n\n  if (clause1 || clause2) {\n    throw actual;\n  }\n};\n\nconst getBaseThrowsActual = function getBaseThrowsActual(fn) {\n  try {\n    return fn();\n  } catch (e) {\n    return e;\n  }\n};\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * Returns whether an exception is expected. Used by assertx~throws and\n * assertx~doesNotThrow.\n *\n * @private\n * @param {boolean} shouldThrow - True if it should throw, otherwise false.\n * @param {Function} fn - The function block to be executed in testing.\n * @param {*} expected - The expected value to compare against actual.\n * @param {string} [message] - Text description of test.\n */\n// eslint-enable jsdoc/check-param-names\nconst baseThrows = function baseThrows(args) {\n  const [shouldThrow, fn, expected, message] = args;\n  assertBaseThrowsFnArg(fn);\n\n  const actual = getBaseThrowsActual(fn);\n  const {msg, xpd} = getBaseThrowsMsg(message, expected);\n  const wasExceptionExpected = expectedException(actual, xpd);\n\n  if (shouldThrow && toBoolean(actual) === false) {\n    baseFail([actual, xpd, `Missing expected exception${msg}`, '']);\n  } else if (toBoolean(shouldThrow) === false && wasExceptionExpected) {\n    baseFail([actual, xpd, `Got unwanted exception${msg}`, '']);\n  } else {\n    throwerBaseThrows([shouldThrow, actual, xpd, wasExceptionExpected]);\n  }\n};\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * Common function for `assert` and `assert~ok`.\n *\n * @private\n * @param {*} value - The value to be tested.\n * @param {string} message - Text description of test.\n * @param {string} operator - Text description of test operator.\n */\n// eslint-enable jsdoc/check-param-names\nconst baseAssert = function baseAssert(args) {\n  const [value, message, operator] = args;\n\n  if (toBoolean(value) === false) {\n    baseFail([false, true, message, operator]);\n  }\n};\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * Tests if value is truthy, it is equivalent to `equal(!!value, true, message)`.\n *\n * @param {*} value - The value to be tested.\n * @param {string} [message] - Text description of test.\n */\n// eslint-enable jsdoc/check-param-names\nconst assert = function assert(value) {\n  /* eslint-disable-next-line prefer-rest-params */\n  baseAssert([value, arguments[1], 'ok']);\n};\n\nconst assertMethods = {\n  /**\n   * Error constructor for test and validation frameworks that implement the\n   * standardized AssertionError specification.\n   *\n   * @class\n   * @augments Error\n   * @param {object} [message] - Need to document the properties.\n   */\n  AssertionError: {\n    value: AssertionErrorConstructor,\n  },\n  /**\n   * Tests for deep equality, coercive equality with the equal comparison\n   * operator ( == ) and equivalent.\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   */\n  deepEqual: {\n    value: function deepEqual(actual, expected) {\n      if (isDeepEqual(actual, expected) === false) {\n        /* eslint-disable-next-line prefer-rest-params */\n        baseFail([actual, expected, arguments[2], 'deepEqual']);\n      }\n    },\n  },\n  /**\n   * Tests for deep equality, coercive equality with the equal comparison\n   * operator ( === ) and equivalent.\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   */\n  deepStrictEqual: {\n    value: function deepStrictEqual(actual, expected) {\n      if (isDeepStrictEqual(actual, expected) === false) {\n        /* eslint-disable-next-line prefer-rest-params */\n        baseFail([actual, expected, arguments[2], 'deepStrictEqual']);\n      }\n    },\n  },\n  /**\n   * Expects block not to throw an error, see assert~throws for details.\n   *\n   * @param {Function} fn - The function block to be executed in testing.\n   * @param {constructor} [error] - The comparator.\n   * @param {string} [message] - Text description of test.\n   */\n  doesNotThrow: {\n    value: function doesNotThrow(fn, error) {\n      /* eslint-disable-next-line prefer-rest-params */\n      baseThrows([false, fn, error, arguments[2]]);\n    },\n  },\n  /**\n   * Tests shallow, coercive equality with the equal comparison\n   * operator ( == ).\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   */\n  equal: {\n    value: function equal(actual, expected) {\n      /* eslint-disable-next-line eqeqeq */ // noinspection EqualityComparisonWithCoercionJS\n      if (actual != expected) {\n        /* eslint-disable-next-line prefer-rest-params */\n        baseFail([actual, expected, arguments[2], '==']);\n      }\n    },\n  },\n  /**\n   * Throws an exception that displays the values for actual and expected\n   * separated by the provided operator.\n   *\n   * @param {string|Error} [message] - Text description of test.\n   * @throws {Error} Throws an `AssertionError`.\n   */\n  fail: {\n    value: function fail(actual) {\n      if (arguments.length < 2) {\n        if (isError(actual)) {\n          throw actual;\n        }\n\n        baseFail([UNDEFINED, UNDEFINED, arguments.length ? actual : 'Failed', 'fail']);\n      } else {\n        /* eslint-disable-next-line prefer-rest-params */\n        const message = arguments[2];\n\n        if (isError(message)) {\n          throw message;\n        }\n\n        /* eslint-disable-next-line prefer-rest-params */\n        const operator = arguments.length > 3 ? arguments[3] : '!=';\n        /* eslint-disable-next-line prefer-rest-params */\n        baseFail([actual, arguments[1], message, operator]);\n      }\n    },\n  },\n  /**\n   * Tests if value is not a falsy value, throws if it is a truthy value.\n   * Useful when testing the first argument, error in callbacks.\n   *\n   * @param {*} err - The value to be tested for truthiness.\n   * @throws {*} The value `err` if truthy.\n   */\n  ifError: {\n    value: function ifError(err) {\n      if (err) {\n        throw err;\n      }\n    },\n  },\n  /**\n   * Tests for any deep inequality. Opposite of `deepEqual`.\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   */\n  notDeepEqual: {\n    value: function notDeepEqual(actual, expected) {\n      if (isDeepEqual(actual, expected)) {\n        /* eslint-disable-next-line prefer-rest-params */\n        baseFail([actual, expected, arguments[2], 'notDeepEqual']);\n      }\n    },\n  },\n  /**\n   * Tests for deep inequality. Opposite of `deepStrictEqual`.\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   */\n  notDeepStrictEqual: {\n    value: function notDeepStrictEqual(actual, expected) {\n      if (isDeepStrictEqual(actual, expected)) {\n        /* eslint-disable-next-line prefer-rest-params */\n        baseFail([actual, expected, arguments[2], 'notDeepStrictEqual']);\n      }\n    },\n  },\n  /**\n   * Tests shallow, coercive non-equality with the not equal comparison\n   * operator ( != ).\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   */\n  notEqual: {\n    value: function notEqual(actual, expected) {\n      /* eslint-disable-next-line eqeqeq */ // noinspection EqualityComparisonWithCoercionJS\n      if (actual == expected) {\n        /* eslint-disable-next-line prefer-rest-params */\n        baseFail([actual, expected, arguments[2], '!=']);\n      }\n    },\n  },\n  /**\n   * Tests strict non-equality, as determined by the strict not equal\n   * operator ( !== ).\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   */\n  notStrictEqual: {\n    value: function notStrictEqual(actual, expected) {\n      if (actual === expected) {\n        /* eslint-disable-next-line prefer-rest-params */\n        baseFail([actual, expected, arguments[2], 'notStrictEqual']);\n      }\n    },\n  },\n  /**\n   * Tests if value is truthy, it is equivalent to\n   * `equal(!!value, true, message)`.\n   *\n   * @param {*} value - The value to be tested.\n   * @param {string} [message] - Text description of test.\n   */\n  ok: {\n    value: function ok(value) {\n      /* eslint-disable-next-line prefer-rest-params */\n      baseAssert([value, arguments[1], 'ok']);\n    },\n  },\n  /**\n   * Tests strict equality, as determined by the strict equality\n   * operator ( === ).\n   *\n   * @param {*} actual - The actual value to be tested.\n   * @param {*} expected - The expected value to compare against actual.\n   * @param {string} [message] - Text description of test.\n   */\n  strictEqual: {\n    value: function strictEqual(actual, expected) {\n      if (actual !== expected) {\n        /* eslint-disable-next-line prefer-rest-params */\n        baseFail([actual, expected, arguments[2], 'strictEqual']);\n      }\n    },\n  },\n  /**\n   * Expects block to throw an error. `error` can be constructor, regexp or\n   * validation function.\n   *\n   * @param {Function} fn - The function block to be executed in testing.\n   * @param {constructor|RegExp|Function} [error] - The comparator.\n   * @param {string} [message] - Text description of test.\n   */\n  throws: {\n    value: function throws(fn, error) {\n      /* eslint-disable-next-line prefer-rest-params */\n      baseThrows([true, fn, error, arguments[2]]);\n    },\n  },\n};\n\ndefineProperties(assert, assertMethods);\n\nexport default assert;\n\n// Expose a strict only variant of assert\nexport function strict(value) {\n  /* eslint-disable-next-line prefer-rest-params */\n  baseAssert([value, arguments[1], 'ok']);\n}\n\nconst strictMethods = assign({}, assertMethods, {\n  equal: assertMethods.strictEqual,\n  deepEqual: assertMethods.deepStrictEqual,\n  notEqual: assertMethods.notStrictEqual,\n  notDeepEqual: assertMethods.notDeepStrictEqual,\n});\n\ndefineProperties(strict, strictMethods);\n"]}